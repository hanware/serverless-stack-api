service: appreciation-app-1-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-dealerships
  tableDealer: ${self:custom.stage}-dealer
  tableOrders: ${self:custom.stage}-orders

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2

  # These environment variables are made available to our functions
  # under process.env.
    # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    tableDealer: ${self:custom.tableDealer}
    tableOrders: ${self:custom.tableOrders}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
    
  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ DealershipTable, Arn ]
        - "Fn::GetAtt": [ DealerTable, Arn ]
        - "Fn::GetAtt": [ OrdersTable, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: dealerships
          method: post
          cors: true
          authorizer: aws_iam
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createdealer:
    handler: createdealer.main
    events:
      - http:
          path: dealer/{id}
          method: post
          cors: true
          authorizer: aws_iam
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  createorder:
    handler: createorder.main
    events:
      - http:
          path: order
          method: post
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: dealerships/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getdealer:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: getdealer.main
    events:
      - http:
          path: dealer/{id}/{dealerid}
          method: get
          cors: true
          authorizer: aws_iam        
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: dealerships
          method: get
          cors: true
          authorizer: aws_iam
  listdealer:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: listdealer.main
    events:
      - http:
          path: dealers/{id}
          method: get
          cors: true
          authorizer: aws_iam
  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: dealerships/{id}
          method: put
          cors: true
          authorizer: aws_iam
  updatedealer:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: updatedealer.main
    events:
      - http:
          path: dealer/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: dealerships/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  deletedealer:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: deletedealer.main
    events:
      - http:
          path: dealer/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  billing:
    # Defines an HTTP API endpoint that calls the main function in billing.js
    # - path: url path is /billing
    # - method: POST request
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/dynamodb-table-dealer.yml)}
  - ${file(resources/dynamodb-table-order.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}